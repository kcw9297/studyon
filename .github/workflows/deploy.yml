name: GitHub Actions CI Workflow
run-name: Build & Deploy

concurrency:
  group: master
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:

  build:
    runs-on: ubuntu-latest

    # 빌드 및 EC2 인스턴스에 빌드된 파일 복사
    steps:

      # step 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # serp 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle Build (테스트 생략)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 5. plain.war 삭제 (실행 불가능한 파일)
      - name: Remove plain.war
        run: rm -f build/libs/*-plain.war

      # 6. 빌드된 WAR 파일 확인
      - name: List WAR files
        run: ls -lh build/libs/*.war

      # 7. EC2로 WAR 파일 전송
      - name: Copy WAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*.war"
          target: "/home/${{ secrets.EC2_USERNAME }}/app"
          strip_components: 2


  # 배포 작업
  deploy:
    runs-on: ubuntu-latest
    needs: build # build 과정을 마친 후에 수행

    steps:

      # 7. EC2 애플리케이션 배포
      - name: Deploy and Run on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          timeout: 90s
          command_timeout: 10m
          debug: true
          script: |
            echo "=== 1. Stop existing application ==="
      
            PID_FILE=~/app/app.pid
            
            if [ -f "$PID_FILE" ]; then
            OLD_PID=$(cat "$PID_FILE")
            echo "Found PID file with PID: $OLD_PID"
            
            if ps -p "$OLD_PID" > /dev/null 2>&1; then
            echo "Stopping process $OLD_PID..."
            kill -15 "$OLD_PID" || true
            sleep 3
            
            # 여전히 살아있으면 강제 종료
            if ps -p "$OLD_PID" > /dev/null 2>&1; then
            echo "Force killing process $OLD_PID..."
            kill -9 "$OLD_PID" || true
            fi
            
            echo "Process stopped"
            else
            echo "Process $OLD_PID is not running"
            fi
            
            rm -f "$PID_FILE"
            else
            echo "No PID file found, checking for running processes..."
            
            # WAR 파일명으로 정확하게 찾기
            RUNNING_PID=$(pgrep -f 'java.*app-APP-STUDYON.*\.war$' || true)
            
            if [ -n "$RUNNING_PID" ]; then
            echo "Found running process: $RUNNING_PID"
            kill -9 $RUNNING_PID || true
            sleep 2
            else
            echo "No running application found"
            fi
            fi
            
            echo "=== 2. Move to app directory ==="
            cd ~/app
            
            echo "=== 3. List files ==="
            ls -lh
            
            echo "=== 4. Find WAR ==="
            WAR_FILE=$(ls *.war 2>/dev/null | grep -v plain | head -n 1)
            
            if [ -z "$WAR_FILE" ]; then
            echo "No WAR file found!"
            exit 1
            fi
            
            echo "Found: $WAR_FILE"
            
            echo "=== 5. Create logs directory ==="
            mkdir -p logs
            
            echo "=== 6. Start application ==="
            nohup java -jar \
            -Xmx512m \
            -Dspring.profiles.active=prod \
            -DPROD_BUCKET_NAME="${{ secrets.PROD_BUCKET_NAME }}" \
            -DPROD_CLOUDFRONT_DOMAIN="${{ secrets.PROD_CLOUDFRONT_DOMAIN }}" \
            -DPROD_CLOUDFRONT_KEY_PAIR_ID="${{ secrets.PROD_CLOUDFRONT_KEY_PAIR_ID }}" \
            -DPROD_CLOUDFRONT_PRIVATE_KEY="${{ secrets.PROD_CLOUDFRONT_PRIVATE_KEY }}" \
            -DPROD_DATABASE_PASSWORD="${{ secrets.PROD_DATABASE_PASSWORD }}" \
            -DPROD_DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}" \
            -DPROD_DATABASE_USERNAME="${{ secrets.PROD_DATABASE_USERNAME }}" \
            -DPROD_FILE_DOMAIN="${{ secrets.PROD_FILE_DOMAIN }}" \
            -DPROD_REDIS_HOST="${{ secrets.PROD_REDIS_HOST }}" \
            -DPROD_REDIS_PORT="${{ secrets.PROD_REDIS_PORT }}" \
            -DPROD_SMTP_MAIL_APP_PASSWORD="${{ secrets.PROD_SMTP_MAIL_APP_PASSWORD }}" \
            -DPROD_SMTP_MAIL_USERNAME="${{ secrets.PROD_SMTP_MAIL_USERNAME }}" \
            "$WAR_FILE" > logs/app.log 2>&1 &
            
            # PID 저장 (다음 배포를 위해)
            echo $! > "$PID_FILE"
            APP_PID=$!
            
            echo "Application started with PID: $APP_PID"
            echo "PID saved to $PID_FILE"
            
            echo "=== 7. Wait 20 seconds ==="
            sleep 20
            
            echo "=== 8. Check process ==="
            if ps -p $APP_PID > /dev/null 2>&1; then
            echo "Application is running (PID: $APP_PID)"
            echo ""
            echo "=== Application Logs (last 50 lines) ==="
            tail -n 50 logs/app.log
            else
            echo "Application failed to start"
            echo ""
            echo "=== Full Application Log ==="
            cat logs/app.log
            exit 1
            fi

name: GitHub Actions CI Workflow
run-name: Build & Deploy

concurrency:
  group: master
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    # 단계별 배포 과정 수행
    steps:

      # step 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # serp 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Gradle Build (테스트 생략 후 WAR 생성)
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # 5. 빌드된 WAR 파일명 확인
      - name: Get WAR filename
        id: war
        run: |
          WAR_FILE=$(ls build/libs/*.war | grep -v plain)
          echo "war_file=$WAR_FILE" >> $GITHUB_OUTPUT
          echo "Found WAR: $WAR_FILE"

      # 6. EC2로 WAR 파일 전송
      - name: Copy WAR to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "build/libs/*.war" # war file
          target: "/home/${{ secrets.EC2_USERNAME }}/app" # "/app" 경로에 WAR 파일 복사
          strip_components: 2

      # 7. EC2 애플리케이션 배포
      - name: Deploy and Run on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 기존 동작 중인 프로세스 종료
            echo "Stopping existing application..."
            pkill -f 'java -jar' || true
            sleep 3
            
            # WAR 파일로 이동
            cd /home/${{ secrets.EC2_USERNAME }}/app
            
            # 로그 디렉토리 생성
            mkdir -p logs
            
            # 환경변수 로드 및 애플리케이션 실행
            echo "Starting application..."
            nohup java -jar \
            -DACTIVE_PROFILE=prod \
            -DPROD_BUCKET_NAME="${{ secrets.PROD_BUCKET_NAME }}" \
            -DCLOUDFRONT_DOMAIN="${{ secrets.CLOUDFRONT_DOMAIN }}" \
            -DCLOUDFRONT_KEY_PAIR_ID="${{ secrets.CLOUDFRONT_KEY_PAIR_ID }}" \
            -DCLOUDFRONT_PRIVATE_KEY="${{ secrets.CLOUDFRONT_PRIVATE_KEY }}" \
            -DPROD_DATABASE_PASSWORD="${{ secrets.PROD_DATABASE_PASSWORD }}" \
            -DPROD_DATABASE_URL="${{ secrets.PROD_DATABASE_URL }}" \
            -DPROD_DATABASE_USERNAME="${{ secrets.PROD_DATABASE_USERNAME }}" \
            -DPROD_FILE_DOMAIN="${{ secrets.PROD_FILE_DOMAIN }}" \
            -DPROD_REDIS_HOST="${{ secrets.PROD_REDIS_HOST }}" \
            -DPROD_REDIS_PORT="${{ secrets.PROD_REDIS_PORT }}" \
            -DPROD_SMTP_MAIL_APP_PASSWORD="${{ secrets.PROD_SMTP_MAIL_APP_PASSWORD }}" \
            -DPROD_SMTP_MAIL_USERNAME="${{ secrets.PROD_SMTP_MAIL_USERNAME }}" \
            *.war > logs/app.log 2>&1 &
            
            echo "Application started!"
            sleep 5
            
            # 프로세스 확인
            if pgrep -f 'java -jar' > /dev/null; then
              echo "Application run successfully!"
            else
              echo "Application failed to start"
              tail -n 50 logs/app.log
              exit 1
            fi